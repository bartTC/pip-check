#!/usr/bin/env python

from __future__ import unicode_literals
import sys
import argparse
from pip.commands import ListCommand
from pip.utils import get_installed_distributions

from colorclass import Color
import terminaltables


ORIG_STDOUT = sys.stdout
OUT = ORIG_STDOUT.write

FORMAT_CONFIG = [
    ('unchanged', 'Unchanged Packages', 'autogreen'),
    ('minor', 'Minor Release Update', 'autoyellow'),
    ('major', 'Major Release Update', 'autored'),
]


def classify_packages(packages):
    options, _ = ListCommand().parse_args([])
    outdated_packages = ListCommand().get_outdated(packages, options)
    uptodated_packages = ListCommand().get_uptodate(packages, options)

    classified_packages = {
        'unchanged': uptodated_packages,
        'minor': [],
        'major': [],
    }
    for package in outdated_packages:
        current_major_version = int(package.parsed_version.public.split('.')[0])
        latest_major_version = int(package.latest_version.public.split('.')[0])
        if latest_major_version - current_major_version > 0:
            classified_packages['major'].append(package)
        else:
            classified_packages['minor'].append(package)
    return classified_packages


def show_packages_in_table(packages, table_type):
    def prune_version(version_str, max_length=10):
        return (version_str if len(version_str) <= max_length
                else '{}...'.format(version_str[:max_length]))

    def columns(package):
        return [
            package.project_name,
            prune_version(package.version),
            prune_version(package.latest_version.base_version),
            'https://pypi.python.org/pypi/{}'.format(package.project_name)
        ]

    table_data = {}
    for key, label, color in FORMAT_CONFIG:
        if packages[key]:
            if key not in table_data:
                table_data[key] = list()
            colored_label = Color('{{{color}}}{label}{{/{color}}}'.format(
                color=color,
                label=label
            ))
            table_data[key].append([colored_label, 'Version', 'Latest'])
            for package in packages[key]:
                table_data[key].append(columns(package))

    for key, data in table_data.items():
        OUT('\n')
        table = table_type(data)
        OUT(table.table)
        OUT('\n')


def main():
    parser = argparse.ArgumentParser(
        description='A quick overview of all installed packages and their update status'
    )
    parser.add_argument(
        '-a', '--ascii',
        action="store_true", dest='ascii_only', default=False,
        help='Display as ASCII Table'
    )
    results = parser.parse_args()
    if results.ascii_only:
        table_type = terminaltables.AsciiTable
    else:
        table_type = terminaltables.SingleTable

    packages = get_installed_distributions()
    try:
        classified_packages = classify_packages(packages)
    except AttributeError:
        OUT(
            "\npip-check needs pip installed in version 9 or later.\n"
            "Please update your pip module.\n\n"
        )

    show_packages_in_table(classified_packages, table_type)


if __name__ == '__main__':
    main()
